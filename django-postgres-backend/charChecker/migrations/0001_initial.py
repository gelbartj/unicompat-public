# Generated by Django 3.0.7 on 2020-06-21 07:42

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Browser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.CharField(choices=[('chrome', 'Chrome'), ('edge', 'Edge'), ('safari', 'Safari'), ('firefox,', 'Firefox'), ('ie', 'IE'), ('opera', 'Opera')], max_length=64)),
                ('version', models.CharField(blank=True, default='', max_length=64)),
                ('rtlSupport', models.NullBooleanField()),
                ('complexScriptSupport', models.NullBooleanField()),
                ('latinCombiningSupport', models.NullBooleanField()),
                ('slug', models.CharField(default='', max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Glyph',
            fields=[
                ('officialName', models.CharField(blank=True, max_length=100)),
                ('codePoint', models.PositiveIntegerField(blank=True, primary_key=True, serialize=False, unique=True)),
                ('codePlane', models.PositiveSmallIntegerField(choices=[(0, 'Basic Multilingual Plane'), (1, 'Supplementary Multilingual Plane'), (2, 'Supplementary Ideographic Plane'), (3, 'Tertiary Ideographic Plane'), (14, 'Supplementary Special-Purpose Plane'), (15, 'Supplementary Private Use Area Plane A'), (16, 'Supplementary Private Use Area Plane B')], default=0)),
                ('category', models.CharField(blank=True, choices=[('L', 'LETTER'), ('Ll', 'Lowercase letter'), ('Lm', 'Letter modifier'), ('Lt', 'Title-case letter'), ('Lu', 'Uppercase letter'), ('Lo', 'Other letter'), ('M', 'MARK'), ('Mc', 'Combining space'), ('Me', 'Enclosing mark'), ('Mn', 'Non-spacing mark'), ('N', 'NUMBER'), ('Nd', 'Decimal digit'), ('Nl', 'Number letter'), ('No', 'Other number'), ('P', 'PUNCTUATION'), ('Pc', 'Connector punctuation'), ('Pd', 'Dash'), ('Pi', 'Initial quote'), ('Pf', 'Final quote'), ('Ps', 'Open punctuation'), ('Pe', 'Close punctuation'), ('Po', 'Other punctuation'), ('S', 'SYMBOL'), ('Sc', 'Currency symbol'), ('Sk', 'Modifier symbol'), ('Sm', 'Math symbol'), ('So', 'Other symbol'), ('Z', 'SEPARATOR'), ('Zl', 'Line separator'), ('Zp', 'Paragraph separator'), ('Zs', 'Space separator'), ('C', 'OTHER'), ('Cc', 'Control character'), ('Cf', 'Format character'), ('Cn', 'Not assigned'), ('Co', 'Private use'), ('Cs', 'Surrogate')], max_length=64)),
                ('joiningGroup', models.CharField(blank=True, max_length=64)),
                ('bitmap', models.ImageField(blank=True, upload_to='bitmaps')),
                ('svg', models.FileField(blank=True, upload_to='')),
                ('abbreviation', models.CharField(blank=True, max_length=10)),
                ('combiningClass', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Spacing, split, enclosing, reordrant, and Tibetan subjoined'), (1, 'Overlays and interior'), (7, 'Nuktas'), (8, 'Hiragana/Katakana voicing marks'), (9, 'Viramas'), (10, 'Start of fixed position classes'), (199, 'End of fixed position classes'), (200, 'Below left attached'), (202, 'Below attached'), (204, 'Below right attached'), (208, 'Left attached (reordrant around single base character)'), (210, 'Right attached'), (212, 'Above left attached'), (214, 'Above attached'), (216, 'Above right attached'), (218, 'Below left'), (220, 'Below'), (222, 'Below right'), (224, 'Left (reordrant around single base character)'), (226, 'Right'), (228, 'Above left'), (230, 'Above'), (232, 'Above right'), (233, 'Double below'), (234, 'Double above'), (240, 'Below (iota subscript)')], null=True)),
                ('definition', models.CharField(blank=True, max_length=500)),
                ('mandarin', models.CharField(blank=True, max_length=200)),
                ('cantonese', models.CharField(blank=True, max_length=200)),
                ('japKun', models.CharField(blank=True, max_length=200)),
                ('japOn', models.CharField(blank=True, max_length=200)),
                ('isEmoji', models.NullBooleanField(default=False)),
                ('isNonCharacter', models.NullBooleanField(default=False)),
                ('isReserved', models.NullBooleanField(default=False)),
                ('decomposition', models.CharField(blank=True, max_length=200, null=True)),
                ('slug', models.CharField(default='', max_length=64, unique=True)),
                ('cachedSupportPercent', models.FloatField(blank=True, default=0.0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UnicodeVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=64, unique=True)),
                ('releaseDate', models.DateField(blank=True, null=True)),
                ('numChars', models.PositiveIntegerField(blank=True, null=True)),
                ('slug', models.CharField(default='', max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('codePoint', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='UnicodeBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('start', models.PositiveIntegerField(blank=True)),
                ('end', models.PositiveIntegerField(blank=True)),
                ('numChars', models.PositiveIntegerField(blank=True, null=True)),
                ('slug', models.CharField(default='', max_length=64, unique=True)),
                ('minUnicodeVersion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeVersion')),
            ],
            options={
                'unique_together': {('start', 'end')},
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('version', models.CharField(blank=True, default='', max_length=64)),
                ('slug', models.CharField(default='', max_length=64, unique=True)),
                ('unicodeVersion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeVersion')),
            ],
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('officialName', models.CharField(blank=True, max_length=100, null=True)),
                ('cpList', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), size=None)),
                ('isEmoji', models.NullBooleanField(default=False)),
                ('glyphs', models.ManyToManyField(to='charChecker.Glyph')),
                ('minUnicodeVersion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeVersion')),
            ],
        ),
        migrations.CreateModel(
            name='PollResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doesShow', models.BooleanField()),
                ('browser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.Browser')),
                ('glyph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='charChecker.Glyph')),
            ],
        ),
        migrations.CreateModel(
            name='OS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.CharField(choices=[('android', 'Android'), ('applebooks', 'Apple Books'), ('chromeos', 'Chrome OS'), ('ios', 'iOS'), ('ipados', 'iPad OS'), ('kindle', 'Kindle'), ('mac', 'macOS'), ('windows', 'Windows'), ('ubuntu', 'Ubuntu'), ('watchos', 'watchOS'), ('tvos', 'tvOS')], max_length=64)),
                ('version', models.CharField(blank=True, default='', max_length=64)),
                ('codeName', models.CharField(blank=True, default='', max_length=64)),
                ('customVersion', models.CharField(blank=True, default='', max_length=64)),
                ('fontListSource', models.CharField(blank=True, default='', max_length=255)),
                ('releaseDate', models.DateField(blank=True, null=True)),
                ('rtlSupport', models.NullBooleanField()),
                ('complexScriptSupport', models.NullBooleanField()),
                ('latinCombiningSupport', models.NullBooleanField()),
                ('slug', models.CharField(default='', max_length=64, unique=True)),
                ('basedOnIos', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.OS')),
                ('maxUnicodeVersion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeVersion')),
            ],
            options={
                'verbose_name': 'OS',
                'verbose_name_plural': 'OSes',
                'unique_together': {('family', 'version')},
            },
        ),
        migrations.AddField(
            model_name='glyph',
            name='minUnicodeVersion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeVersion'),
        ),
        migrations.AddField(
            model_name='glyph',
            name='unicodeBlock',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeBlock'),
        ),
        migrations.AddField(
            model_name='glyph',
            name='variantVers',
            field=models.ManyToManyField(blank=True, to='charChecker.Variant'),
        ),
        migrations.AddField(
            model_name='browser',
            name='maxUnicodeVersion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeVersion'),
        ),
        migrations.AddField(
            model_name='browser',
            name='osCombo',
            field=models.ManyToManyField(blank=True, to='charChecker.OS'),
        ),
        migrations.CreateModel(
            name='Font',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('style', models.CharField(blank=True, default='', max_length=64)),
                ('fileName', models.CharField(blank=True, default='', max_length=64)),
                ('fileType', models.CharField(blank=True, max_length=64)),
                ('slug', models.CharField(default='', max_length=64, unique=True)),
                ('sources', models.TextField(blank=True, default='', null=True)),
                ('glyphs', models.ManyToManyField(blank=True, to='charChecker.Glyph')),
                ('incWithOS', models.ManyToManyField(blank=True, to='charChecker.OS')),
                ('incWithOSonRequest', models.ManyToManyField(blank=True, related_name='OSesOnRequest', to='charChecker.OS')),
                ('incWithSoftware', models.ManyToManyField(blank=True, to='charChecker.Software')),
                ('maxUnicodeVersion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='charChecker.UnicodeVersion')),
                ('sequences', models.ManyToManyField(blank=True, to='charChecker.Sequence')),
            ],
            options={
                'unique_together': {('name', 'style', 'fileName')},
            },
        ),
    ]
